def library_sort_binary_search_with_blanks(S, k):
    low, high = 0, len(S) - 1

    while low < high:
        mid = (low + high) // 2

        if S[mid] == -1:
            m1 = m2 = mid

            while m1 >= low and S[m1] == -1:
                m1 -= 1

            while m2 <= high and S[m2] == -1:
                m2 += 1

            if m1 < 0 and m2 >= high + 1:
                low = high = m1 + 1

            if m1 == 0 and m2 >= high + 1:
                if k < S[m1]:
                    low = high = m1
                else:
                    low = high = m1 + 1

            if m1 > 0 and m2 >= high + 1:
                if k >= S[m1]:
                    high = m1 + 1
                else:
                    high = m1 - 1

            if m1 > 0 and m2 < high + 1:
                if k <= S[m1]:
                    if k == S[m1]:
                        low = high = m1
                    else:
                        high = m1 - 1

            if k > S[m1] and k < S[m2]:
                low = m1 + 1
                high = m2 - 1

            if k >= S[m2]:
                if m2 < high:
                    low = m2 + 1
                else:
                    low = m2

            if m1 == 0 and m2 <= high:
                if k <= S[m1]:
                    high = m1

            if k > S[m1] and k < S[m2]:
                low = m1 + 1
                high = m2 - 1

            if k >= S[m2]:
                if m2 <= high:
                    low = m2 + 1
                else:
                    low = m2

        else:
            if S[mid] < k:
                low = mid + 1

            if S[mid] > k:
                high = mid - 1

            if S[mid] == k:
                return mid

    if low == high:
        if S[low] < k:
            low += 1
            high += 1

    return low

# Ejemplo de uso
S = [1, -1, 3, -1, 5, -1, 7, -1, 9]
k = 6
print(library_sort_binary_search_with_blanks(S, k)) 


